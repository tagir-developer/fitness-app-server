type User {
  id: ID!
  userName: String
  email: String!
  age: Int
}

type RegisterData {
  accessToken: String!
  refreshToken: String!
  user: User
}

type LogoutData {
  token: String!
}

input UserInput {
  email: String!
  password: String!
}

input ChangePasswordInput {
  password: String!
  confirmPassword: String!
  token: String!
}

type PaswordReset {
  message: String!
}

type TestMail {
  message: String!
}

type changePasswordData {
  message: String!
}

type getUserIdByTokenData {
  userId: String!
  token: String!
}

type Query {
  getAllUsers: [User!]!
  getUser(email: String!): User!
}

type Mutation {
  register(user: UserInput!): RegisterData!
  login(user: UserInput!): RegisterData!
  logout(refreshToken: String!): LogoutData!
  refresh(refreshToken: String!): RegisterData!
  reset(email: String!): PaswordReset!
  testMail(email: String!): TestMail!
  # getUserIdByToken(token: String!): getUserIdByTokenData!
  changePassword(data: ChangePasswordInput!): changePasswordData!
}
